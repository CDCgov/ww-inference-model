% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wwinference.R
\name{wwinference}
\alias{wwinference}
\alias{wwinference_fit}
\alias{print.wwinference_fit}
\alias{summary.wwinference_fit}
\title{Joint inference of count data (e.g. cases/admissions) and wastewater
data}
\usage{
wwinference(
  ww_data,
  count_data,
  forecast_date = NULL,
  calibration_time = 90,
  forecast_horizon = 28,
  model_spec = get_model_spec(),
  fit_opts = get_mcmc_options(),
  generate_initial_values = TRUE,
  compiled_model = compile_model()
)

\method{print}{wwinference_fit}(x, ...)

\method{summary}{wwinference_fit}(object, ...)
}
\arguments{
\item{ww_data}{A dataframe containing the pre-processed, site-level
wastewater concentration data for a model run. The dataframe must contain
the following columns: \code{date}, \code{site}, \code{lab}, \code{genome_copies_per_ml},
\code{lab_site_index}, \code{lod}, \code{below_lod}, \code{site_pop} \code{exclude}}

\item{count_data}{A dataframe containing the pre-procssed, "global" (e.g.
state) daily count data, pertaining to the number of events that are being
counted on that day, e.g. number of daily cases or daily hospital admissions.
Must contain the following columns: \code{date}, \code{count} , \code{total_pop}}

\item{forecast_date}{a character string in ISO8601 format (YYYY-MM-DD)
indicating the date that the forecast is to be made. Default is NULL}

\item{calibration_time}{integer indicating the number of days to calibrate
the model for, default is \code{90}}

\item{forecast_horizon}{integer indicating the number of days, including the
forecast date, to produce forecasts for, default is \code{28}}

\item{model_spec}{The model specification parameters as defined using
\code{get_model_spec()}. The default here pertains to the \code{forecast_date} in the
example data provided by the package, but this should be specified by the
user based on the date they are producing a forecast}

\item{fit_opts}{The fit options, which in this case default to the
MCMC parameters as defined using \code{get_mcmc_options()}.}

\item{generate_initial_values}{Boolean indicating whether or not to specify
the initialization of the sampler, default is \code{TRUE}, meaning that
initialization lists will be generated and passed as the \code{init} argument
to the model object \code{\link[cmdstanr:model-method-sample]{$sample()}} call.
function}

\item{compiled_model}{The pre-compiled model as defined using
\code{compile_model()}}

\item{x, object}{Object of class \code{wwinference_fit}}

\item{...}{Additional parameters passed to the corresponding method}
}
\value{
An object of the \code{ww_inference_fit} class containing the following
items that are intended to be passed to downstream functions to do things
like extract posterior draws, get diangostic behavior, and plot results
(for example). If the model runs, this
function will return:
\code{fit}: The CmdStan object that is returned from the call to
\code{cmdstanr::sample()}. Can be used to access draws, summary, diagnostics, etc.
\code{raw_input_data}: a list containing the input \code{ww_data} and the input
\code{count_data} used in the model.
\code{stan_data_list}: a list containing the inputs passed directly to the
stan model
\code{fit_opts}: a list of the MCMC specifications passed to stan

If the model fails to run, a list containing the follow will be returned:
\code{error}: the error message provided from stan, indicating why the model
failed to run. Note, the model might still run and produce draws even if it
has major model issues. We recommend the user always run the
\code{check_diagnostics()} function on the \code{diagnostic_summary} as part of any
pipeline to ensure model convergence.

\itemize{
\item The print method prints out information about the model and
returns the object invisibly.
}

\itemize{
\item The summary method returns the outcome from the
\verb{$summary} (\code{\link[cmdstanr:fit-method-summary]{cmdstanr::summary()}}) function.
}
}
\description{
Provides a user friendly interface around package functionality
to produce estimates, nowcasts, and forecasts pertaining to user-specified
delay distributions, set parameters, and priors that can be modified to
handledifferent types of "global" count data and "local" wastewater
concentrationdata using a Bayesian hierarchical framework applied to the two
distinctdata sources. By default the model assumes a fixed generation
interval and delay from infection to the event that is counted. See the
getting started vignette for an example model specifications fitting
COVID-19 hospital admissions from a hypothetical state and wasteawter
concentration data from multiple sites within that state.
}
\examples{
\dontrun{
ww_data <- tibble::tibble(
  date = rep(seq(
    from = lubridate::ymd("2023-08-01"),
    to = lubridate::ymd("2023-11-01"),
    by = "weeks"
  ), 2),
  site = c(rep(1, 14), rep(2, 14)),
  lab = c(rep(1, 28)),
  conc = abs(rnorm(28, mean = 500, sd = 50)),
  lod = c(rep(20, 14), rep(15, 14)),
  site_pop = c(rep(2e5, 14), rep(4e5, 14))
)

ww_data_preprocessed <- preprocess_ww_data(ww_data,
  conc_col_name = "conc",
  lod_col_name = "lod"
)
input_ww_data <- indicate_ww_exclusions(ww_data_preprocessed)

hosp_data <- tibble::tibble(
  date = seq(
    from = lubridate::ymd("2023-07-01"),
    to = lubridate::ymd("2023-10-30"),
    by = "days"
  ),
  daily_admits = sample(5:70, 122, replace = TRUE),
  state_pop = rep(1e6, 122)
)

input_count_data <- preprocess_count_data(
  hosp_data,
  "daily_admits",
  "state_pop"
)

generation_interval <- to_simplex(c(0.01, 0.2, 0.3, 0.2, 0.1, 0.1, 0.01))
inf_to_count_delay <- to_simplex(c(
  rep(0.01, 12), rep(0.2, 4),
  rep(0.01, 10)
))
infection_feedback_pmf <- generation_interval

params <- get_params(
  system.file("extdata", "example_params.toml",
    package = "wwinference"
  )
)
forecast_date <- "2023-11-06"
calibration_time <- 90
forecast_horizon <- 28
include_ww <- 1
ww_fit <- wwinference(input_ww_data,
  input_count_data,
  model_spec = get_model_spec(
    forecast_date = forecast_date,
    calibration_time = calibration_time,
    forecast_horizon = forecast_horizon,
    generation_interval = generation_interval,
    inf_to_count_delay = inf_to_coutn_delay,
    infection_feedback_pmf = infection_feedback_pmf,
    params = params
  ),
  fit_opts = get_mcmc_options(
    iter_warmup = 250,
    iter_sampling = 250,
    n_chains = 2
  )
)
}
}
\seealso{
Other diagnostics:
\code{\link{get_model_diagnostic_flags}()},
\code{\link{parameter_diagnostics}()}
}
\concept{diagnostics}
